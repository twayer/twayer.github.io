<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小番茄BLOG</title>
  
  <subtitle>SmallHouse</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tot.github.io/"/>
  <updated>2021-10-16T16:21:26.000Z</updated>
  <id>https://tot.github.io/</id>
  
  <author>
    <name>小番茄</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gitalk测试</title>
    <link href="https://tot.github.io/posts/9aa0fe8f/"/>
    <id>https://tot.github.io/posts/9aa0fe8f/</id>
    <published>2021-10-16T16:21:09.000Z</published>
    <updated>2021-10-16T16:21:26.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>加密文章测试</title>
    <link href="https://tot.github.io/posts/7e709353/"/>
    <id>https://tot.github.io/posts/7e709353/</id>
    <published>2020-01-21T02:14:11.000Z</published>
    <updated>2021-10-15T12:22:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <script id="hbeData" type="hbeData" data-hmacdigest="f0f9c9cb2c90f3c8d8b638899d3e6bab0b7028795b0f7c3f96c9f31947f55a5b">4630436162ade97ba2718b7d0c4b3b63480c11f21f943edd569d93952dd2b428ca40d00edd08503bde446612a9b43ffa557648f22736556fdb8df232a70f5b62381872db0244c43c00526e1a08cf52221edf34128af95f6689fc9f8038d2d384d80553865a152ddd5e6208a870af3b5c9bc83d20b2dbb9eed9bf4345fcbd80740d0d96973b857ce18daf962a01b68ae1d5fbd8ee95919ff5e4e59e2389903324d011f36e647c7bfde1d377a277b639b7845f1864318dedde1881f738423184c1eda461211d6767b7282687bd23a77a8725cebce8f83995baff71092164b22479</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">嗨，请准确无误地输入密码查看哟（密码：123456）！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
      <category term="private" scheme="https://tot.github.io/categories/private/"/>
    
    
      <category term="加密文章" scheme="https://tot.github.io/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>github Issue 作为博客微型数据库的应用</title>
    <link href="https://tot.github.io/posts/e7fe3cc/"/>
    <id>https://tot.github.io/posts/e7fe3cc/</id>
    <published>2019-11-28T14:02:05.000Z</published>
    <updated>2021-10-15T09:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>众所周知，对于hexo框架搭建的静态博客，难免会产生一些动态的数据，比如一些碎碎念、友链、音乐、时间轴等微型数据。目前一般的做法:</p><p>a.是创建一个json数据，来存储这些微型数据，但是如果数据太多的话，一是比较慢，二是有个硬伤问题，就是json数据不能分页请求，只能一次拿完，太多的话网络带宽占用太多。</p><a id="more"></a><p>b.或者有的直接后台写一些接口服务啥的，还得在买个服务器部署上去，然后博客中访问接口。</p><p>c.或者有些可能就直接写到html中。</p><p>对于a、c方法都比较麻烦，每次更新了都要编译部署，不能很方便的动态更新。对于b的话，成本以及技术要求可能就更多一些了。</p><p>基于上面出现的问题，目前想到的一个解决方案就是，利用github 的issue作为一个微型数据库。能够很方便的动态更新，也能分页，也不需要啥json文件，想想都很方便。</p><h3 id="issue数据库使用步骤"><a href="#issue数据库使用步骤" class="headerlink" title="issue数据库使用步骤"></a>issue数据库使用步骤</h3><h4 id="issue的创建"><a href="#issue的创建" class="headerlink" title="issue的创建"></a>issue的创建</h4><p>先创建一个Repository，对于此Repository可以专门作为微型的数据库，取名issue_database。创建好之后建立一些issue</p><p>如下所示</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191128213154.png" alt=""></p><p>目前博客中，所有的动态数据都放到issue中了。</p><h4 id="issue中存储数据"><a href="#issue中存储数据" class="headerlink" title="issue中存储数据"></a>issue中存储数据</h4><p>对于创建好的issue，就可以往里面写数据了，比如我的友链数据为issue：blog_friends</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191128213427.png" alt=""></p><p>对于issue中存储的数据最好存json格式的，因为可以方便后面取出来使用。存储好数据后，如果太多的话，可以点击hide,隐藏起来。同时这个issue最好给<code>Lock conversation</code>这样的好处是，防止别人往里面加些脏数据，只能自己往里写数据。哈哈，一般也没有闲的无聊的网友恶作剧。这样就存储好数据了。</p><h4 id="博客中获取issue数据"><a href="#博客中获取issue数据" class="headerlink" title="博客中获取issue数据"></a>博客中获取issue数据</h4><p>博客中通过js获取issue中的数据，以博客友链为例，以下是获取代码，以及处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// author by removef</span></span><br><span class="line"><span class="comment">// https://removeif.github.io/</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//获取处理友链数据，来自issue，一次取完</span></span><br><span class="line">    $.getJSON(<span class="string">"https://api.github.com/repos/removeif/issue_database/issues/2/comments?per_page=100&amp;client_id=46a9f3481b46ea0129d8&amp;client_secret=79c7c9cb847e141757d7864453bcbf89f0655b24"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = [];</span><br><span class="line">        <span class="keyword">var</span> source1;</span><br><span class="line">        source1 = source;</span><br><span class="line">      <span class="comment">// 以后每次更新的都在后面，此处倒序，按时间降序排</span></span><br><span class="line">        source1.reverse();</span><br><span class="line">      <span class="comment">// 把所有的数据放到data的列表中</span></span><br><span class="line">        $.each(source1, <span class="function"><span class="keyword">function</span> (<span class="params">i, e</span>) </span>&#123;</span><br><span class="line">            data.push(...JSON.parse(e.body));</span><br><span class="line">        &#125;);</span><br><span class="line">      </span><br><span class="line">        $.each(data, <span class="function"><span class="keyword">function</span> (<span class="params">i, e</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 博客中html文件的构建，渲染</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中client_id、client_secret在另一篇文章中<strong><a href="https://removeif.github.io/2019/09/19/%E5%8D%9A%E5%AE%A2%E6%BA%90%E7%A0%81%E5%88%86%E4%BA%AB.html">博客源码分享</a></strong>有详细的说明,可以查看一下。这样就能获取到相应的数据，进行操作。</p><h4 id="issue数据的更新"><a href="#issue数据的更新" class="headerlink" title="issue数据的更新"></a>issue数据的更新</h4><p>比如想更新任意一项数据都可以进github中对应的仓库的issue下进行更新，添加。然后实时去博客中查看。</p><h3 id="扩展一下"><a href="#扩展一下" class="headerlink" title="扩展一下"></a>扩展一下</h3><p>对于有些爱唠叨的人（比如我），弄个类似碎碎念的东西就比较实用了。之前想过各种方案，存json数据太不方便；后台写个服务部署服务器也太麻烦。最后思来想去还是利用了下现成的优秀项目<a href="https://github.com/gitalk/gitalk">gitalk</a>,稍稍改改就能很好使用。</p><h4 id="博客中的碎碎念"><a href="#博客中的碎碎念" class="headerlink" title="博客中的碎碎念"></a>博客中的碎碎念</h4><p>对于博主而言，有发表框和修改的操作，能够方便发表和修改。</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191128215148.png" alt=""></p><p>可能有时候还会发表一些图片，对图片的样式做了一些控制</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191128215345.png" alt=""></p><p>对于网友的话只能查看以及点赞加❤️</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20191128215555.png" alt=""></p><p>做法就是源码中改下返回html的文件内容，如果是管理员和非管理员返回一些不同的元素，能够很好的实现碎碎念的功能。<br>查看<a href="https://removeif.github.io/self-talking/">碎碎念</a>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>静态博客的动态数据是个痛点，GitHub Issue有很多可利用的地方。多去探索发掘其中的奥妙。</p><p>利用GitHub Issue来解决目前也是一种解决方法。希望后面会出现更好的解决方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;众所周知，对于hexo框架搭建的静态博客，难免会产生一些动态的数据，比如一些碎碎念、友链、音乐、时间轴等微型数据。目前一般的做法:&lt;/p&gt;
&lt;p&gt;a.是创建一个json数据，来存储这些微型数据，但是如果数据太多的话，一是比较慢，二是有个硬伤问题，就是json数据不能分页请求，只能一次拿完，太多的话网络带宽占用太多。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具教程" scheme="https://tot.github.io/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/"/>
    
      <category term="主题工具" scheme="https://tot.github.io/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/%E4%B8%BB%E9%A2%98%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具教程" scheme="https://tot.github.io/tags/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>博客中gitalk最新评论的获取</title>
    <link href="https://tot.github.io/posts/47c45f64/"/>
    <id>https://tot.github.io/posts/47c45f64/</id>
    <published>2019-09-12T17:03:06.000Z</published>
    <updated>2021-10-15T09:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客中，对于网友的评论以及每篇文章的评论数还是很重要的。但是基于静态的页面想要存储动态的评论数据是比较难的，一般博客主题中都内置了评论插件，但是博客主题中对于最新评论的支持显示还是很少的，至少目前我是没怎么发现。博客 Powered by <a href="http://hexo.io/">Hexo</a> &amp; <a href="http://github.com/ppoffice/hexo-theme-icarus">Icarus</a>，采用<a href="https://github.com/gitalk/gitalk">Gitalk</a>评论，再次感谢此三位作者的辛勤码代码，才有了以下的内容。基于此背景基础上，聊聊最新评论的实现。</p></blockquote><a id="more"></a><p>博客的使用， <a href="http://hexo.io/">Hexo</a> &amp; <a href="http://github.com/ppoffice/hexo-theme-icarus">Icarus</a>，采用<a href="https://github.com/gitalk/gitalk">Gitalk</a>评论 的使用自行百度了。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>最新评论列表</li><li>最热文章列表（基于评论数判断是否最热，也比较片面，但是侧面也能反映，问题不大）</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>主要参考自<a href="https://developer.github.com/v3/issues/">官方文档</a></p><p>目前主要用到<code>两个方法</code>，一个是获取仓库下所有的issue，每个issue节点下有相关的评论数，以及对应issue下的评论的url;还有一个是根据issue下评论的URL获取相应的所有的评论</p><h4 id="方法1：List-issues-for-a-repository"><a href="#方法1：List-issues-for-a-repository" class="headerlink" title="方法1：List issues for a repository"></a>方法1：<a href="https://developer.github.com/v3/issues/">List issues for a repository</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /orgs/:org/issues</span><br></pre></td></tr></table></figure><p>参数列表</p><table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center"><code>milestone</code></td><td align="center"><code>integer</code> or <code>string</code></td><td align="center">If an <code>integer</code> is passed, it should refer to a milestone by its <code>number</code> field. If the string <code>*</code> is passed, issues with any milestone are accepted. If the string <code>none</code> is passed, issues without milestones are returned.</td></tr><tr><td align="center"><code>state</code></td><td align="center"><code>string</code></td><td align="center">Indicates the state of the issues to return. Can be either <code>open</code>, <code>closed</code>, or <code>all</code>. Default: <code>open</code></td></tr><tr><td align="center"><code>assignee</code></td><td align="center"><code>string</code></td><td align="center">Can be the name of a user. Pass in <code>none</code> for issues with no assigned user, and <code>*</code> for issues assigned to any user.</td></tr><tr><td align="center"><code>creator</code></td><td align="center"><code>string</code></td><td align="center">The user that created the issue.</td></tr><tr><td align="center"><code>mentioned</code></td><td align="center"><code>string</code></td><td align="center">A user that’s mentioned in the issue.</td></tr><tr><td align="center"><code>labels</code></td><td align="center"><code>string</code></td><td align="center">A list of comma separated label names. Example: <code>bug,ui,@high</code></td></tr><tr><td align="center"><code>sort</code></td><td align="center"><code>string</code></td><td align="center">What to sort results by. Can be either <code>created</code>, <code>updated</code>, <code>comments</code>. Default: <code>created</code></td></tr><tr><td align="center"><code>direction</code></td><td align="center"><code>string</code></td><td align="center">The direction of the sort. Can be either <code>asc</code> or <code>desc</code>. Default: <code>desc</code></td></tr><tr><td align="center"><code>since</code></td><td align="center"><code>string</code></td><td align="center">Only issues updated at or after this time are returned. This is a timestamp in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</td></tr></tbody></table><p>以上参数，主要用到 <code>sort 排序，page页数，per_page每页数量</code>，其余的参数看个人需要使用。<strong>注意文档中的说明，排序的字段和返回的稍许不太一样。</strong></p><h4 id="方法2：List-comments-on-an-issue"><a href="#方法2：List-comments-on-an-issue" class="headerlink" title="方法2：List comments on an issue"></a>方法2：<a href="https://developer.github.com/v3/issues/comments/">List comments on an issue</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /repos/:owner/:repo/issues/:issue_number/comments</span><br></pre></td></tr></table></figure><p>Issue Comments are ordered by ascending ID. 排序根据 ascending (上升的，增长的；升（序）的)ID.也就是说，从老到新。这个比较坑，对于我们获取最新评论来说。</p><p>参数如下</p><table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center"><code>since</code></td><td align="center"><code>string</code></td><td align="center">Only comments updated at or after this time are returned. This is a timestamp in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</td></tr></tbody></table><p>根据尝试以及以上参数，试出<code>不支持排序，但是支持分页，page,per_page参数</code>，对于我们获取最新的评论来说可以根据评论数，算出分页数，拿到最后一条，即最新一条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果只有一页</span></span><br><span class="line"><span class="keyword">int</span> page = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> per_page = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 如果超出一页的话</span></span><br><span class="line"><span class="keyword">int</span> page = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> per_page = commentsNumber-<span class="number">1</span>;<span class="comment">//commentsNumber:评论数</span></span><br></pre></td></tr></table></figure><h4 id="js代码中使用实例核心代码"><a href="#js代码中使用实例核心代码" class="headerlink" title="js代码中使用实例核心代码"></a>js代码中使用实例核心代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timesSet = [];</span><br><span class="line"><span class="keyword">var</span> timesBodyMap = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> timesSetMap = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> resultArr = [];</span><br><span class="line"><span class="comment">// 方法1：sort=comments可以按评论数排序，此处更适合按更新时间排序,可以根据updated排序，但是0条评论的也会出来，所以此处还是根据评论数排序全部查出来，过滤掉0条评论的，拿到每个issue下最新的一条评论详情和时间，根据时间内存排序</span></span><br><span class="line"><span class="comment">// per_page 每页数量，根据需求配置</span></span><br><span class="line">$.getJSON(<span class="string">"https://api.github.com/repos/&#123;用户名&#125;/&#123;仓库&#125;/issues?per_page=100&amp;sort=comments"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    $.each(result, <span class="function"><span class="keyword">function</span> (<span class="params">i, item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> commentsCount = item.comments;</span><br><span class="line">        <span class="keyword">if</span> (commentsCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            $.ajaxSettings.async = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 此处保证是最后一条，api没有排序参数，只能分页取最后一条，保证最少的数据量传输，快速处理</span></span><br><span class="line">            <span class="keyword">var</span> page = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">var</span> pageSize = commentsCount - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (commentsCount == <span class="number">1</span>) &#123;</span><br><span class="line">                page = <span class="number">1</span>;</span><br><span class="line">                pageSize = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 方法2：的使用</span></span><br><span class="line">            $.getJSON(item.comments_url + <span class="string">"?page="</span> + page + <span class="string">"&amp;per_page="</span> + pageSize, <span class="function"><span class="keyword">function</span> (<span class="params">commentResult</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> item1 = commentResult[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">var</span> contentStr = item1.body.trim();</span><br><span class="line">                <span class="keyword">if</span> (contentStr.length &gt; <span class="number">50</span>) &#123;</span><br><span class="line">                    contentStr = contentStr.substr(<span class="number">0</span>, <span class="number">60</span>);</span><br><span class="line">                    contentStr += <span class="string">"..."</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                timesSet.push(<span class="keyword">new</span> <span class="built_in">Date</span>(item1.created_at).getTime());</span><br><span class="line">                timesBodyMap[item1.created_at] = &#123;</span><br><span class="line">                    <span class="string">"title"</span>: item.title.substr(<span class="number">0</span>, item.title.indexOf(<span class="string">"-"</span>) - <span class="number">1</span>),</span><br><span class="line">                    <span class="string">"url"</span>: item.body.substr(<span class="number">0</span>, item.body.indexOf(<span class="string">"\n"</span>) - <span class="number">1</span>),</span><br><span class="line">                    <span class="string">"content"</span>: contentStr,</span><br><span class="line">                    <span class="string">"date"</span>: item1.created_at,</span><br><span class="line">                    <span class="string">"userName"</span>: item1[<span class="string">"user"</span>].login,</span><br><span class="line">                    <span class="string">"userUrl"</span>: item1[<span class="string">"user"</span>].html_url,</span><br><span class="line">                    <span class="string">"commentCount"</span>: commentsCount</span><br><span class="line">                &#125;;</span><br><span class="line">                timesSetMap[<span class="keyword">new</span> <span class="built_in">Date</span>(item1.created_at).getTime()] = item1.created_at;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line"><span class="keyword">if</span> (timesSet.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    timesSet.sort();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据需要取10条</span></span><br><span class="line"><span class="keyword">if</span> (timesSet.length &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = timesSet.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; resultArr.length &lt; <span class="number">10</span>; i--) &#123;</span><br><span class="line">        resultArr.push(timesBodyMap[timesSetMap[timesSet[i]]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = timesSet.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        resultArr.push(timesBodyMap[timesSetMap[timesSet[i]]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法1：请求接口地址示例"><a href="#方法1：请求接口地址示例" class="headerlink" title="方法1：请求接口地址示例"></a>方法1：请求接口地址示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//api.github.com/repos/removeif/blog_comment/issues?per_page=100&amp;sort=comments</span></span><br></pre></td></tr></table></figure><p><strong>返回结果</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://api.github.com/repos/removeif/blog_comment/issues/3"</span>,</span><br><span class="line">    <span class="attr">"repository_url"</span>: <span class="string">"https://api.github.com/repos/removeif/blog_comment"</span>,</span><br><span class="line">    <span class="attr">"labels_url"</span>: <span class="string">"https://api.github.com/repos/removeif/blog_comment/issues/3/labels&#123;/name&#125;"</span>,</span><br><span class="line">    <span class="attr">"comments_url"</span>: <span class="string">"https://api.github.com/repos/removeif/blog_comment/issues/3/comments"</span>,</span><br><span class="line">    <span class="attr">"events_url"</span>: <span class="string">"https://api.github.com/repos/removeif/blog_comment/issues/3/events"</span>,</span><br><span class="line">    <span class="attr">"html_url"</span>: <span class="string">"https://github.com/removeif/blog_comment/issues/3"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">458985510</span>,</span><br><span class="line">    <span class="attr">"node_id"</span>: <span class="string">"MDU6SXNzdWU0NTg5ODU1MTA="</span>,</span><br><span class="line">    <span class="attr">"number"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"留言板 - 辣椒の酱"</span>,</span><br><span class="line">    <span class="attr">"user"</span>: &#123;</span><br><span class="line">      <span class="attr">"login"</span>: <span class="string">"removeif"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">10427139</span>,</span><br><span class="line">      <span class="attr">"node_id"</span>: <span class="string">"MDQ6VXNlcjEwNDI3MTM5"</span>,</span><br><span class="line">      <span class="attr">"avatar_url"</span>: <span class="string">"https://avatars1.githubusercontent.com/u/10427139?v=4"</span>,</span><br><span class="line">      <span class="attr">"gravatar_id"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://api.github.com/users/removeif"</span>,</span><br><span class="line">      <span class="attr">"html_url"</span>: <span class="string">"https://github.com/removeif"</span>,</span><br><span class="line">      <span class="attr">"followers_url"</span>: <span class="string">"https://api.github.com/users/removeif/followers"</span>,</span><br><span class="line">      <span class="attr">"following_url"</span>: <span class="string">"https://api.github.com/users/removeif/following&#123;/other_user&#125;"</span>,</span><br><span class="line">      <span class="attr">"gists_url"</span>: <span class="string">"https://api.github.com/users/removeif/gists&#123;/gist_id&#125;"</span>,</span><br><span class="line">      <span class="attr">"starred_url"</span>: <span class="string">"https://api.github.com/users/removeif/starred&#123;/owner&#125;&#123;/repo&#125;"</span>,</span><br><span class="line">      <span class="attr">"subscriptions_url"</span>: <span class="string">"https://api.github.com/users/removeif/subscriptions"</span>,</span><br><span class="line">      <span class="attr">"organizations_url"</span>: <span class="string">"https://api.github.com/users/removeif/orgs"</span>,</span><br><span class="line">      <span class="attr">"repos_url"</span>: <span class="string">"https://api.github.com/users/removeif/repos"</span>,</span><br><span class="line">      <span class="attr">"events_url"</span>: <span class="string">"https://api.github.com/users/removeif/events&#123;/privacy&#125;"</span>,</span><br><span class="line">      <span class="attr">"received_events_url"</span>: <span class="string">"https://api.github.com/users/removeif/received_events"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"User"</span>,</span><br><span class="line">      <span class="attr">"site_admin"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"labels"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1416043904</span>,</span><br><span class="line">        <span class="attr">"node_id"</span>: <span class="string">"MDU6TGFiZWwxNDE2MDQzOTA0"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"https://api.github.com/repos/removeif/blog_comment/labels/3306ea6632b94cc388b40cef9dda4a8f"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"3306ea6632b94cc388b40cef9dda4a8f"</span>,</span><br><span class="line">        <span class="attr">"color"</span>: <span class="string">"0e8a16"</span>,</span><br><span class="line">        <span class="attr">"default"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1415994590</span>,</span><br><span class="line">        <span class="attr">"node_id"</span>: <span class="string">"MDU6TGFiZWwxNDE1OTk0NTkw"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"https://api.github.com/repos/removeif/blog_comment/labels/Gitalk"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Gitalk"</span>,</span><br><span class="line">        <span class="attr">"color"</span>: <span class="string">"5319e7"</span>,</span><br><span class="line">        <span class="attr">"default"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"open"</span>,</span><br><span class="line">    <span class="attr">"locked"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"assignee"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"assignees"</span>: [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"milestone"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"comments"</span>: <span class="number">33</span>,</span><br><span class="line">    <span class="attr">"created_at"</span>: <span class="string">"2019-06-21T03:06:53Z"</span>,</span><br><span class="line">    <span class="attr">"updated_at"</span>: <span class="string">"2019-09-12T10:37:34Z"</span>,</span><br><span class="line">    <span class="attr">"closed_at"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"author_association"</span>: <span class="string">"OWNER"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: <span class="string">"https://removeif.github.io/message/\r\n\r\n留言板信息。"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;...&#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h4 id="方法2：请求接口地址示例"><a href="#方法2：请求接口地址示例" class="headerlink" title="方法2：请求接口地址示例"></a>方法2：请求接口地址示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//api.github.com/repos/removeif/blog_comment/issues/3/comments?per_page=32&amp;page=2</span></span><br></pre></td></tr></table></figure><p><strong>返回结果</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://api.github.com/repos/removeif/blog_comment/issues/comments/530767913"</span>,</span><br><span class="line">    <span class="attr">"html_url"</span>: <span class="string">"https://github.com/removeif/blog_comment/issues/3#issuecomment-530767913"</span>,</span><br><span class="line">    <span class="attr">"issue_url"</span>: <span class="string">"https://api.github.com/repos/removeif/blog_comment/issues/3"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">530767913</span>,</span><br><span class="line">    <span class="attr">"node_id"</span>: <span class="string">"MDEyOklzc3VlQ29tbWVudDUzMDc2NzkxMw=="</span>,</span><br><span class="line">    <span class="attr">"user"</span>: &#123;</span><br><span class="line">      <span class="attr">"login"</span>: <span class="string">"removeif"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">10427139</span>,</span><br><span class="line">      <span class="attr">"node_id"</span>: <span class="string">"MDQ6VXNlcjEwNDI3MTM5"</span>,</span><br><span class="line">      <span class="attr">"avatar_url"</span>: <span class="string">"https://avatars1.githubusercontent.com/u/10427139?v=4"</span>,</span><br><span class="line">      <span class="attr">"gravatar_id"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://api.github.com/users/removeif"</span>,</span><br><span class="line">      <span class="attr">"html_url"</span>: <span class="string">"https://github.com/removeif"</span>,</span><br><span class="line">      <span class="attr">"followers_url"</span>: <span class="string">"https://api.github.com/users/removeif/followers"</span>,</span><br><span class="line">      <span class="attr">"following_url"</span>: <span class="string">"https://api.github.com/users/removeif/following&#123;/other_user&#125;"</span>,</span><br><span class="line">      <span class="attr">"gists_url"</span>: <span class="string">"https://api.github.com/users/removeif/gists&#123;/gist_id&#125;"</span>,</span><br><span class="line">      <span class="attr">"starred_url"</span>: <span class="string">"https://api.github.com/users/removeif/starred&#123;/owner&#125;&#123;/repo&#125;"</span>,</span><br><span class="line">      <span class="attr">"subscriptions_url"</span>: <span class="string">"https://api.github.com/users/removeif/subscriptions"</span>,</span><br><span class="line">      <span class="attr">"organizations_url"</span>: <span class="string">"https://api.github.com/users/removeif/orgs"</span>,</span><br><span class="line">      <span class="attr">"repos_url"</span>: <span class="string">"https://api.github.com/users/removeif/repos"</span>,</span><br><span class="line">      <span class="attr">"events_url"</span>: <span class="string">"https://api.github.com/users/removeif/events&#123;/privacy&#125;"</span>,</span><br><span class="line">      <span class="attr">"received_events_url"</span>: <span class="string">"https://api.github.com/users/removeif/received_events"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"User"</span>,</span><br><span class="line">      <span class="attr">"site_admin"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"created_at"</span>: <span class="string">"2019-09-12T10:37:34Z"</span>,</span><br><span class="line">    <span class="attr">"updated_at"</span>: <span class="string">"2019-09-12T10:37:34Z"</span>,</span><br><span class="line">    <span class="attr">"author_association"</span>: <span class="string">"OWNER"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: <span class="string">"&gt; 哇 大佬你博客弄的好厉害啊  可以指点指点吗\n&gt;&gt; @xuelangjing 还好吧😂，简简单单的，可以多看下网页上的源码，有什么问题可以讨论讨论哦"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>博客中目前有两个页面使用,根据个人的需要放到各自的位置吧。</p><p><strong><a href="https://removeif.github.io/">首页热门推荐</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20190913005314.png" alt=""></p><p><strong><a href="https://removeif.github.io/comment/">还有个最新评论页：</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/img/2019/20190913005510.png" alt=""></p><h3 id="扩展一个方法"><a href="#扩展一个方法" class="headerlink" title="扩展一个方法"></a>扩展一个方法</h3><p>上面的实例程序，<code>每个issue（因为我的每个issue关联一个文章链接）</code>只取了一条最新的评论，假如每个issue下有两个都是最新的评论，而我也不管是不是同一个issue下的评论，获取所有的最新评论，还有一个方法比较好用。</p><h4 id="List-comments-in-a-repository"><a href="#List-comments-in-a-repository" class="headerlink" title="List comments in a repository"></a><a href="https://developer.github.com/v3/issues/comments/#list-comments-in-a-repository">List comments in a repository</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /repos/:owner/:repo/issues/comments</span><br></pre></td></tr></table></figure><p>By default, Issue Comments are ordered by ascending ID. 和上面一样，但是以下参数就不一样了</p><table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center"><code>sort</code></td><td align="center"><code>string</code></td><td align="center">Either <code>created</code> or <code>updated</code>. Default: <code>created</code></td></tr><tr><td align="center"><code>direction</code></td><td align="center"><code>string</code></td><td align="center">Either <code>asc</code> or <code>desc</code>. Ignored without the <code>sort</code> parameter.</td></tr><tr><td align="center"><code>since</code></td><td align="center"><code>string</code></td><td align="center">Only comments updated at or after this time are returned. This is a timestamp in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</td></tr></tbody></table><p>多了<code>排序字段和排序方式，也有per和per_page</code>，这是相当的有用啊</p><h4 id="扩展方法：请求接口地址示例"><a href="#扩展方法：请求接口地址示例" class="headerlink" title="扩展方法：请求接口地址示例"></a>扩展方法：请求接口地址示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//api.github.com/repos/removeif/blog_comment/issues/comments?sort=updated&amp;direction=desc&amp;per_page=10&amp;page=1</span></span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://api.github.com/repos/removeif/blog_comment/issues/comments/530767913"</span>,</span><br><span class="line">    <span class="attr">"html_url"</span>: <span class="string">"https://github.com/removeif/blog_comment/issues/3#issuecomment-530767913"</span>,</span><br><span class="line">    <span class="attr">"issue_url"</span>: <span class="string">"https://api.github.com/repos/removeif/blog_comment/issues/3"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">530767913</span>,</span><br><span class="line">    <span class="attr">"node_id"</span>: <span class="string">"MDEyOklzc3VlQ29tbWVudDUzMDc2NzkxMw=="</span>,</span><br><span class="line">    <span class="attr">"user"</span>: &#123;</span><br><span class="line">      <span class="attr">"login"</span>: <span class="string">"removeif"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">10427139</span>,</span><br><span class="line">      <span class="attr">"node_id"</span>: <span class="string">"MDQ6VXNlcjEwNDI3MTM5"</span>,</span><br><span class="line">      <span class="attr">"avatar_url"</span>: <span class="string">"https://avatars1.githubusercontent.com/u/10427139?v=4"</span>,</span><br><span class="line">      <span class="attr">"gravatar_id"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://api.github.com/users/removeif"</span>,</span><br><span class="line">      <span class="attr">"html_url"</span>: <span class="string">"https://github.com/removeif"</span>,</span><br><span class="line">      <span class="attr">"followers_url"</span>: <span class="string">"https://api.github.com/users/removeif/followers"</span>,</span><br><span class="line">      <span class="attr">"following_url"</span>: <span class="string">"https://api.github.com/users/removeif/following&#123;/other_user&#125;"</span>,</span><br><span class="line">      <span class="attr">"gists_url"</span>: <span class="string">"https://api.github.com/users/removeif/gists&#123;/gist_id&#125;"</span>,</span><br><span class="line">      <span class="attr">"starred_url"</span>: <span class="string">"https://api.github.com/users/removeif/starred&#123;/owner&#125;&#123;/repo&#125;"</span>,</span><br><span class="line">      <span class="attr">"subscriptions_url"</span>: <span class="string">"https://api.github.com/users/removeif/subscriptions"</span>,</span><br><span class="line">      <span class="attr">"organizations_url"</span>: <span class="string">"https://api.github.com/users/removeif/orgs"</span>,</span><br><span class="line">      <span class="attr">"repos_url"</span>: <span class="string">"https://api.github.com/users/removeif/repos"</span>,</span><br><span class="line">      <span class="attr">"events_url"</span>: <span class="string">"https://api.github.com/users/removeif/events&#123;/privacy&#125;"</span>,</span><br><span class="line">      <span class="attr">"received_events_url"</span>: <span class="string">"https://api.github.com/users/removeif/received_events"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"User"</span>,</span><br><span class="line">      <span class="attr">"site_admin"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"created_at"</span>: <span class="string">"2019-09-12T10:37:34Z"</span>,</span><br><span class="line">    <span class="attr">"updated_at"</span>: <span class="string">"2019-09-12T10:37:34Z"</span>,</span><br><span class="line">    <span class="attr">"author_association"</span>: <span class="string">"OWNER"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: <span class="string">"&gt; 哇 大佬你博客弄的好厉害啊  可以指点指点吗\n&gt;&gt; @xuelangjing 还好吧😂，简简单单的，可以多看下网页上的源码，有什么问题可以讨论讨论哦"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><h4 id="总结此扩展方法"><a href="#总结此扩展方法" class="headerlink" title="总结此扩展方法"></a>总结此扩展方法</h4><p><strong>优点：</strong>对于不在乎issue数量，只在乎最新评论的就比较适用，能够精准拿出前10条，很赞<br><strong>不足：</strong>一个issue下多个最新评论，如果想要显示的最新评论列表还包括文章标题，看起来可能不太好看，很多重复，但是看个人需要吧</p><h4 id="注意事项，采坑环节"><a href="#注意事项，采坑环节" class="headerlink" title="注意事项，采坑环节"></a>注意事项，采坑环节</h4><ul><li>对应接口的请求限制，目前接口有请求的限制，所以使用中不能频繁请求，调试的时候一会儿又限制，一会儿又限制比较麻烦，限制十几分钟之后就解除了。</li><li>对于页面中，一般很多个地方可能都需要展示这个列表，所以不能每次都去请求，必须缓存起来，一般缓存到本地，我的是存的cookie中，十分钟去请求一次，所以调好后一般不会出现限制情况。但是马上评论了的就看不到，有10分钟的延迟，不过也还好。</li><li>对于如果issue以及评论太多的情况，尽量的少请求，比如上面的分页优化，取最后一条。以及页面中请求时做出异步请求的方式，不要阻止其他元素的渲染。</li></ul><p>本人主要做后端，对前端的<code>set/排序</code>不太熟悉，上面实现排序代码比较繁琐😂，如果有什么更好的方法，麻烦也告知一下，互相学习共同进步。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;博客中，对于网友的评论以及每篇文章的评论数还是很重要的。但是基于静态的页面想要存储动态的评论数据是比较难的，一般博客主题中都内置了评论插件，但是博客主题中对于最新评论的支持显示还是很少的，至少目前我是没怎么发现。博客 Powered by &lt;a href=&quot;http://hexo.io/&quot;&gt;Hexo&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://github.com/ppoffice/hexo-theme-icarus&quot;&gt;Icarus&lt;/a&gt;，采用&lt;a href=&quot;https://github.com/gitalk/gitalk&quot;&gt;Gitalk&lt;/a&gt;评论，再次感谢此三位作者的辛勤码代码，才有了以下的内容。基于此背景基础上，聊聊最新评论的实现。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="工具教程" scheme="https://tot.github.io/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/"/>
    
      <category term="主题工具" scheme="https://tot.github.io/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/%E4%B8%BB%E9%A2%98%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="icarus主题配置" scheme="https://tot.github.io/tags/icarus%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
      <category term="hexo主题" scheme="https://tot.github.io/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>安装、部分配置icarus主题中文版</title>
    <link href="https://tot.github.io/posts/52c38f29/"/>
    <id>https://tot.github.io/posts/52c38f29/</id>
    <published>2019-02-28T02:36:56.000Z</published>
    <updated>2021-10-15T09:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要<br>发现icarus主题还不错，花了一两个小时研究了下安装、部分配置icarus主题中文版</p></blockquote><a id="more"></a><h2 id="安装icarus"><a href="#安装icarus" class="headerlink" title="安装icarus"></a>安装icarus</h2><ul><li>直接下载主题模块放到blog项目 ,blog项目根目录执行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span></span><br></pre></td></tr></table></figure><p>此时已经下载到项目中。</p><ul><li><p>顶级_config.yml中选择<code>icarus</code>主题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: icarus</span><br></pre></td></tr></table></figure></li><li><p>此时主题已经安装好，清除、编译、部署可以看到效果了</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/20190620160640.png" alt=""></p></li></ul><h2 id="配置icarus"><a href="#配置icarus" class="headerlink" title="配置icarus"></a>配置icarus</h2><ul><li>完全参照<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/Configuration/Posts/">官网</a>配置，进行翻译解说</li></ul><h3 id="配置文章部分"><a href="#配置文章部分" class="headerlink" title="配置文章部分"></a>配置文章部分</h3><h4 id="顶部图片添加"><a href="#顶部图片添加" class="headerlink" title="顶部图片添加"></a>顶部图片添加</h4><p>icarus 主题中的配置_config.yml中开启图片开关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">article:</span><br><span class="line">    thumbnail: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>文章.md文件头中添加图片绝对/相对地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: Getting Started with Icarus</span><br><span class="line">thumbnail: /gallery/thumbnails/desert.jpg</span><br><span class="line"><span class="comment">// thumbnail:https://cdn.jsdelivr.net/gh/removeif/blog_image/20190620152744.png</span></span><br><span class="line">---</span><br><span class="line">Post content...</span><br></pre></td></tr></table></figure><p>配置完成后部署显示效果如下(最新文章列表显示缩略图、文章开头显示一张设置图片)</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/20190620160657.png" alt=""></p><h4 id="左边文章导航栏开启"><a href="#左边文章导航栏开启" class="headerlink" title="左边文章导航栏开启"></a>左边文章导航栏开启</h4><p>icarus 主题中的配置_config.yml中开关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">widgets:</span><br><span class="line">    -</span><br><span class="line">        type: toc</span><br><span class="line">        position: left</span><br></pre></td></tr></table></figure><p>同事文章顶部加入标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: Table of Contents Example</span><br><span class="line">toc: <span class="keyword">true</span></span><br><span class="line">---</span><br><span class="line">Post content...</span><br></pre></td></tr></table></figure><p>配置效果</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/20190620160721.png" alt=""></p><h5 id="评论系统开启"><a href="#评论系统开启" class="headerlink" title="评论系统开启"></a>评论系统开启</h5><p>icarus 主题中的配置_config.yml中开启（部分评论系统需要翻墙才能使用，valine不用翻墙个人推荐，<a href="https://valine.js.org/quickstart.html">valine安装参考</a>）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">comment:</span><br><span class="line">    type: valine</span><br><span class="line">    app_id: xxxxxxxx        # (required) LeanCloud application id</span><br><span class="line">    app_key: xxxxxxxx       # (required) LeanCloud application key</span><br><span class="line">    notify: false           # (optional) receive email notification</span><br><span class="line">    verify: false           # (optional) show verification code</span><br><span class="line">    placeholder: xxxxxxxx   # (optional) comment box placeholder text</span><br></pre></td></tr></table></figure><p>开启效果</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/20190620160740.png" alt=""></p><h4 id="捐赠收款开启"><a href="#捐赠收款开启" class="headerlink" title="捐赠收款开启"></a>捐赠收款开启</h4><p>icarus 主题中的配置_config.yml中开启 注意如果默认不配置，编译时有报错，可以# 把它注释掉，不启用功能 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">donate:</span><br><span class="line">    -</span><br><span class="line">        # Donation entry name</span><br><span class="line">        type: alipay</span><br><span class="line">        # Qrcode image URL</span><br><span class="line">        qrcode: <span class="string">'https://wx2.sinaimg.cn/large/b5d1b710gy1g0lvxdcwm0j20p011i4bg.jpg'</span> </span><br><span class="line">    -</span><br><span class="line">        # Donation entry name</span><br><span class="line">        type: wechat</span><br><span class="line">        # Qrcode image URL</span><br><span class="line">        qrcode: <span class="string">'https://wx2.sinaimg.cn/large/b5d1b710gy1g0lvwdcpb5j20u014qgy2.jpg'</span></span><br></pre></td></tr></table></figure><p>开启配置效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/20190620160805.png" alt=""></p><h3 id="全局搜索开启"><a href="#全局搜索开启" class="headerlink" title="全局搜索开启"></a>全局搜索开启</h3><p>icarus 主题中的配置_config.yml中开启,不同的搜索类型需要<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/Plugins/Search/">安装插件参考官网</a>,type: insight此类型不需要安装，已经内置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">    type: insight</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/removeif/blog_image/20190620161155.png" alt=""></p><h3 id="更多配置请参考官网配置"><a href="#更多配置请参考官网配置" class="headerlink" title="更多配置请参考官网配置"></a>更多配置请参考官网配置</h3><p>目前配置基本已经够使用，还需要更多配置请参考<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/Configuration/Posts/">连接</a></p><p><a href="https://blog.zhangruipeng.me/hexo-theme-icarus/categories/Configuration/Posts/">参考自</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要&lt;br&gt;发现icarus主题还不错，花了一两个小时研究了下安装、部分配置icarus主题中文版&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="工具教程" scheme="https://tot.github.io/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/"/>
    
      <category term="主题工具" scheme="https://tot.github.io/categories/%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/%E4%B8%BB%E9%A2%98%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="icarus主题配置" scheme="https://tot.github.io/tags/icarus%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
      <category term="hexo主题" scheme="https://tot.github.io/tags/hexo%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
</feed>
